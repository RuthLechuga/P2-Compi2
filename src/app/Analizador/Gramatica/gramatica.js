/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[5,11,17,24,25,30,32,33,34,35,36,37,38],$Vd=[2,31],$Ve=[17,34,35,36,37,38],$Vf=[5,9,11,13,17,24,25,30,32,33,34,35,36,37,38],$Vg=[5,9,11,17,23,24,25,30,32,33,34,35,36,37,38,43,45],$Vh=[2,33],$Vi=[1,36],$Vj=[1,45],$Vk=[1,53],$Vl=[1,43],$Vm=[1,44],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,59],$Vu=[1,65],$Vv=[1,64],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61],$VK=[1,81],$VL=[1,84],$VM=[13,20],$VN=[5,9,11,17,23,24,25,28,30,32,33,34,35,36,37,38,43,45],$VO=[1,118],$VP=[1,116],$VQ=[1,119],$VR=[5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,46,48,49,53,54,55,56,57,58,59,60,61],$VS=[5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,46,48,49,51,52,53,54,55,56,57,58,59,60,61],$VT=[5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,53,54,55,56,57,58,59,60,61],$VU=[5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,57,58,59,60,61],$VV=[17,23,30,32,33,34,35,36,37,38,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES_GLOBALES":4,"EOF":5,"INSTRUCCION_GLOBAL":6,"IMPORTS":7,"DECLARACION":8,"PUNTOCOMA":9,"METODO":10,"import":11,"ARCHIVOS":12,",":13,"archivo":14,"VISIBILIDAD":15,"TIPO":16,"identificador":17,"(":18,"LISTA_PARAMETROS":19,")":20,"LLIZQ":21,"INSTRUCCIONES":22,"LLDER":23,"private":24,"public":25,"PARAMETRO":26,"ID_LISTA":27,"=":28,"EXPRESION":29,"var":30,":=":31,"const":32,"global":33,"integer":34,"double":35,"char":36,"boolean":37,"void":38,"INSTRUCCION":39,"PRINT":40,"LLAMADA":41,"RETURN":42,"print":43,"LISTA_EXPRESION":44,"return":45,"-":46,"!":47,"+":48,"%":49,"^^":50,"*":51,"/":52,"<":53,">":54,"<=":55,">=":56,"==":57,"!=":58,"&&":59,"||":60,"^":61,"ARREGLO":62,"ENTERO":63,"DECIMAL":64,"verdadero":65,"falso":66,"STRING_LITERAL":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PUNTOCOMA",11:"import",13:",",14:"archivo",17:"identificador",18:"(",20:")",21:"LLIZQ",23:"LLDER",24:"private",25:"public",28:"=",30:"var",31:":=",32:"const",33:"global",34:"integer",35:"double",36:"char",37:"boolean",38:"void",43:"print",45:"return",46:"-",47:"!",48:"+",49:"%",50:"^^",51:"*",52:"/",53:"<",54:">",55:"<=",56:">=",57:"==",58:"!=",59:"&&",60:"||",61:"^",62:"ARREGLO",63:"ENTERO",64:"DECIMAL",65:"verdadero",66:"falso",67:"STRING_LITERAL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,1],[6,1],[7,3],[7,2],[12,3],[12,1],[10,9],[10,8],[10,8],[10,7],[15,1],[15,1],[19,3],[19,1],[26,2],[8,4],[8,4],[8,4],[8,4],[8,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[27,3],[27,1],[22,2],[22,1],[39,1],[39,2],[39,1],[39,2],[39,1],[39,1],[40,5],[40,4],[41,4],[41,3],[44,3],[44,1],[42,3],[42,2],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new Arbol(this.$);
break;
case 2: case 34:
 this.$ = $$[$0-1]; Array.prototype.push.apply(this.$,$$[$0]); 
break;
case 3: case 4: case 6: case 35: case 38: case 68: case 69:
 this.$ = $$[$0]; 
break;
case 5: case 37: case 75:
 this.$ = $$[$0-1]; 
break;
case 7: case 11: case 19: case 33: case 36: case 40: case 41: case 47:
 this.$ = [$$[$0]]; 
break;
case 8:

                                                                                    this.$ = [];
                                                                                    $$[$0-1].map(url => {
                                                                                        this.$.push(new Importar(url,this._$.first_line, this._$.first_column));
                                                                                    });
                                                                                
break;
case 9:

                                                                                    this.$ = [];
                                                                                    $$[$0].map(url => {
                                                                                        this.$.push(new Importar(url,this._$.first_line, this._$.first_column));
                                                                                    });
                                                                                
break;
case 10:
   
                                                                                    this.$ = $$[$0-2]; 
                                                                                    this.$.push($$[$0]);
                                                                                
break;
case 12:
 this.$ = new Funcion($$[$0-8], $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 13:
 this.$ = new Funcion(null, $$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 14:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 15:
 this.$ = new Funcion(null, $$[$0-5], $$[$0-4], [], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 16:
 this.$ = Visibilidad.PRIVATE; 
break;
case 17:
 this.$ = Visibilidad.PUBLIC; 
break;
case 18:
 
                                                            this.$ = $$[$0-2]; 
                                                            this.$.push($$[$0]); 
                                                        
break;
case 20:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, false, false, this._$.first_line, this._$.first_column); 
break;
case 21:

                                                                this.$ = [];
                                                                $$[$0-2].map(id => {
                                                                    this.$.push(new Declaracion($$[$0-3],id,$$[$0],false,false,this._$.first_line, this._$.first_column));
                                                                });
                                                            
break;
case 22:

                                                                this.$ = [];
                                                                this.$.push(new Declaracion(null,$$[$0-2],$$[$0],false,false,this._$.first_line, this._$.first_column));
                                                            
break;
case 23:

                                                                this.$ = [];
                                                                this.$.push(new Declaracion(null,$$[$0-2],$$[$0],true,false,this._$.first_line, this._$.first_column));
                                                            
break;
case 24:

                                                                this.$ = [];
                                                                this.$.push(new Declaracion(null,$$[$0-2],$$[$0],false,true,this._$.first_line, this._$.first_column));
                                                            
break;
case 25:

                                                                this.$ = [];
                                                                $$[$0].map(id => {
                                                                    this.$.push(new Declaracion($$[$0-1],id,null,false,false,this._$.first_line, this._$.first_column));
                                                                });
                                                            
break;
case 26:
 this.$ = new Tipo(Types.INTEGER); 
break;
case 27:
 this.$ = new Tipo(Types.DOUBLE); 
break;
case 28:
 this.$ = new Tipo(Types.CHAR); 
break;
case 29:
 this.$ = new Tipo(Types.BOOLEAN); 
break;
case 30:
 this.$ = new Tipo(Types.VOID); 
break;
case 31:

                                this.$ = new Tipo(Types.STRUCT); 
                                this.$.setTipoObjeto($$[$0]); 
                            
break;
case 32:
   
                                                this.$ = $$[$0-2]; 
                                                this.$.push($$[$0]);
                                            
break;
case 39:
 this.$ = [$$[$0-1]]; 
break;
case 42:
 this.$ = new Print($$[$0-2]); 
break;
case 43:
 this.$ = new Print($$[$0-1]); 
break;
case 44:
 this.$ = new Llamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = new Llamada($$[$0-2], [], this._$.first_line, this._$.first_column); 
break;
case 46:
 
                                                        this.$ = $$[$0-2];
                                                        this.$.push($$[$0]);
                                                    
break;
case 48:
 this.$ = new Return($$[$0-1]); 
break;
case 49:
 this.$ = new Return($$[$0]); 
break;
case 50:
 this.$ = new OperacionAritmetica($$[$0], undefined, '-', this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new OperacionAritmetica($$[$0-1], undefined, '!', this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '+', this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '-', this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '%', this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '^^', this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '*', this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '/', this._$.first_line, this._$.first_column); 
break;
case 58:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '<', this._$.first_line, this._$.first_column); 
break;
case 59:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '>', this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '<=', this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '>=', this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '&&', this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '||', this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '^', this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 70: case 71:
 this.$ = new Primitivo(new Tipo(Types.INTEGER), $$[$0], this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new Primitivo(new Tipo(Types.BOOLEAN), 1, this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new Primitivo(new Tipo(Types.BOOLEAN), 0, this._$.first_line, this._$.first_column); 
break;
case 74:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Cadena($$[$0], new Arreglo(new Tipo(Types.STRING), [new Primitivo(new Tipo(Types.INTEGER), $$[$0].length, this._$.first_line, this._$.first_column)], this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:$V0,15:12,16:8,17:$V1,24:$V2,25:$V3,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{1:[3]},{5:[1,21],6:22,7:4,8:5,10:6,11:$V0,15:12,16:8,17:$V1,24:$V2,25:$V3,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,6],{9:[1,23]}),o($Vc,[2,7]),{12:24,14:[1,25]},{17:[1,27],27:26},{17:[1,28]},{17:[1,29]},{17:[1,30]},{16:31,17:$V1,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{17:[2,26]},{17:[2,27]},{17:[2,28]},{17:[2,29]},{17:[2,30]},{17:$Vd},o($Ve,[2,16]),o($Ve,[2,17]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,5]),o($Vc,[2,9],{9:[1,32],13:[1,33]}),o($Vf,[2,11]),o($Vg,[2,25],{28:[1,34]}),o([5,9,11,17,24,25,28,30,32,33,34,35,36,37,38],$Vh,{13:$Vi,18:[1,35]}),{31:[1,37]},{31:[1,38]},{31:[1,39]},{17:[1,40]},o($Vc,[2,8]),{14:[1,41]},{17:$Vj,18:$Vk,29:42,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{16:57,17:$V1,19:54,20:[1,55],26:56,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{17:$Vt,27:58},{17:$Vj,18:$Vk,29:60,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:61,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:62,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{18:[1,63]},o($Vf,[2,10]),o($Vg,[2,21],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),{17:$Vj,18:$Vk,29:79,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:80,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VJ,[2,67],{18:$VK}),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),o($VJ,[2,73]),o($VJ,[2,74]),{17:$Vj,18:$Vk,29:82,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{13:$VL,20:[1,83]},{21:[1,85]},o($VM,[2,19]),{17:[1,86]},o($VN,[2,32]),o($VN,$Vh,{13:$Vi}),o($Vg,[2,22],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vg,[2,23],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vg,[2,24],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),{16:57,17:$V1,19:87,20:[1,88],26:56,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{17:$Vj,18:$Vk,29:89,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:90,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:91,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:92,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:93,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:94,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:95,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:96,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:97,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:98,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:99,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:100,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:101,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:102,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vj,18:$Vk,29:103,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VJ,[2,50]),o($VJ,[2,51]),{17:$Vj,18:$Vk,20:[1,105],29:106,41:47,44:104,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{20:[1,107],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{21:[1,108]},{16:57,17:$V1,26:109,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{8:113,16:117,17:$VO,22:110,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:111,40:112,41:114,42:115,43:$VP,45:$VQ},o($VM,[2,20]),{13:$VL,20:[1,120]},{21:[1,121]},o($VR,[2,52],{50:$Vx,51:$Vy,52:$Vz}),o($VR,[2,53],{50:$Vx,51:$Vy,52:$Vz}),o($VR,[2,54],{50:$Vx,51:$Vy,52:$Vz}),o($VJ,[2,55]),o($VS,[2,56],{50:$Vx}),o($VS,[2,57],{50:$Vx}),o($VT,[2,58],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VT,[2,59],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VT,[2,60],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VT,[2,61],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VU,[2,62],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VU,[2,63],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o([5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,59,60],[2,64],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,61:$VI}),o([5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,60],[2,65],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,61:$VI}),o([5,9,11,13,17,20,23,24,25,30,32,33,34,35,36,37,38,43,45,59,60,61],[2,66],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),{13:[1,123],20:[1,122]},o($VJ,[2,45]),o($VM,[2,47],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VJ,[2,75]),{8:113,16:117,17:$VO,22:124,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:111,40:112,41:114,42:115,43:$VP,45:$VQ},o($VM,[2,18]),{8:113,16:117,17:$VO,23:[1,125],30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:126,40:112,41:114,42:115,43:$VP,45:$VQ},o($VV,[2,35]),o($VV,[2,36]),o($VV,[2,38],{9:[1,127]}),o($VV,[2,40],{9:[1,128]}),o($VV,[2,41]),{18:[1,129]},{17:$Vt,27:26},{17:$Vd,18:$VK},{17:$Vj,18:$Vk,29:130,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{21:[1,131]},{8:113,16:117,17:$VO,22:132,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:111,40:112,41:114,42:115,43:$VP,45:$VQ},o($VJ,[2,44]),{17:$Vj,18:$Vk,29:133,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{8:113,16:117,17:$VO,23:[1,134],30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:126,40:112,41:114,42:115,43:$VP,45:$VQ},o($Vc,[2,15]),o($VV,[2,34]),o($VV,[2,37]),o($VV,[2,39]),{17:$Vj,18:$Vk,29:135,41:47,46:$Vl,47:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VV,[2,49],{9:[1,136],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),{8:113,16:117,17:$VO,22:137,30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:111,40:112,41:114,42:115,43:$VP,45:$VQ},{8:113,16:117,17:$VO,23:[1,138],30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:126,40:112,41:114,42:115,43:$VP,45:$VQ},o($VM,[2,46],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vc,[2,13]),{20:[1,139],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},o($VV,[2,48]),{8:113,16:117,17:$VO,23:[1,140],30:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va,38:$Vb,39:126,40:112,41:114,42:115,43:$VP,45:$VQ},o($Vc,[2,14]),o($VV,[2,43],{9:[1,141]}),o($Vc,[2,12]),o($VV,[2,42])],
defaultActions: {13:[2,26],14:[2,27],15:[2,28],16:[2,29],17:[2,30],18:[2,31],21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitivo} = require('../Expresiones/Primitivo');
    const {OperacionAritmetica} = require('../Expresiones/OperacionAritmetica');
    const {OperacionRelacional} = require('../Expresiones/OperacionRelacional');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Caracter} = require('../Expresiones/Caracter');
    const {Cadena} = require('../Expresiones/Cadena');
    const {Arreglo} = require('../Expresiones/Arreglo');
    const {Llamada} = require('../Expresiones/Llamada');
    const {Return} = require('../Expresiones/Return');
    const {Print} = require('../Instrucciones/Print');
    const {Si} = require('../Instrucciones/Si');
    const {Funcion} = require('../Instrucciones/Funcion');
    const {Mientras} = require('../Instrucciones/Mientras');
    const {HacerMientras} = require('../Instrucciones/HacerMientras');
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Importar} = require('../Instrucciones/Import');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {Errr} = require('../Excepcion/Error');
    const {Tipo, Types} = require('../utils/Tipo');
    const {Arbol} = require('../TablaSimbolos/Arbol');
    const {Visibilidad} = require('../Utils/Common');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 64
break;
case 4:return 63
break;
case 5:return 67
break;
case 6:return 'CHAR_LITERAL'
break;
case 7:return 51
break;
case 8:return 52
break;
case 9:return 9
break;
case 10:return 46
break;
case 11:return 48
break;
case 12:return 49
break;
case 13:return 50
break;
case 14:return 61
break;
case 15:return 60
break;
case 16:return 59
break;
case 17:return 47
break;
case 18:return 53
break;
case 19:return 54
break;
case 20:return 55
break;
case 21:return 56
break;
case 22:return '==='
break;
case 23:return 57
break;
case 24:return 58
break;
case 25:return 28
break;
case 26:return 31
break;
case 27:return 18
break;
case 28:return 20  
break;
case 29:return '['
break;
case 30:return ']'
break;
case 31:return 23
break;
case 32:return 21
break;
case 33:return 13
break;
case 34:return 34
break;
case 35:return 35
break;
case 36:return 36
break;
case 37:return 37
break;
case 38:return 'TRUE'
break;
case 39:return 'FALSE'
break;
case 40:return 11
break;
case 41:return 43
break;
case 42:return 30
break;
case 43:return 32
break;
case 44:return 33
break;
case 45:return 38
break;
case 46:return 25
break;
case 47:return 24
break;
case 48:return 45
break;
case 49:return 14
break;
case 50:return 17
break;
case 51:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\'\"\\bfnrtv]))|([^\"\\]+))')))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?::=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\{)/i,/^(?:,)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:import\b)/i,/^(?:print\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:return\b)/i,/^(?:([a-zA-Z]([a-zA-Z]|[0-9]|\.)*(\.j)))/i,/^(?:([a-zA-Z]([a-zA-Z]|[0-9])*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}